# This is a basic workflow to help you get started with Actions

name: CI-build

env:
  IMAGE_ACCOUNT: michaelkuc6
  IMAGE_NAME: fcap

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test-buildscript:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: michaelkuc6/tup:latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Use Docker Tup image to generate build script
      - name: Generate build with Tup
        run: |
          cd $GITHUB_WORKSPACE/generator && tup init && tup generate build-github.sh

      # Runs a single command using the runners shell
      - name: Check build matches commit build
        run: cd $GITHUB_WORKSPACE/generator && diff -q build.sh build-github.sh

  build:
    needs: test-buildscript

    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Builds the generator program
      - name: Build generator in Docker container
        run: |
          cd $GITHUB_WORKSPACE && docker build . --file Dockerfile --tag "$IMAGE_NAME"

      - name: Log into Docker Hub registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "$IMAGE_ACCOUNT" --password-stdin

      - name: Push image to Docker Hub registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          IMAGE_ID="$IMAGE_ACCOUNT/$IMAGE_NAME"
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

